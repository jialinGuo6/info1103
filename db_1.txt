/****************************************************************************************
**																					   **
**									    INFO 1103 									   **
**																					   **
**								        Project 2									   **
**																					   **
**                         Shawn Kroetsch (Student #: 3442023)						   **
**						   	 Jialin Guo (Student #: 3687827)						   **
**																					   **
**                                    March 22, 2021								   **
**                               													   **
****************************************************************************************/

/*****************************************************************
*					PART 1: TABLE CREATION                       *
*****************************************************************/


USE cs_SKROETSC;

SET FOREIGN_KEY_CHECKS=0;
DROP TABLE IF EXISTS enters, is_eligible_for, wins;
DROP TABLE IF EXISTS EMPLOYEE, JUDGE_QUALIFICATION, ENTRANT, CONTEST, JUDGE, PRIZE, SPONSOR;
DROP VIEW IF EXISTS SPONSOR_VIEW;
SET FOREIGN_KEY_CHECKS=1;

CREATE TABLE JUDGE (
JUDGE_ID 		INTEGER 		PRIMARY KEY		AUTO_INCREMENT,
JUDGE_NAME 		VARCHAR(100) 	NOT NULL,
JUDGE_ADDRESS 	VARCHAR(100) 	NOT NULL);

CREATE TABLE JUDGE_QUALIFICATION (
JUDGE_ID			INTEGER			NOT NULL,
JUDGE_QUAL_NAME		VARCHAR(100)	NOT NULL,
PRIMARY KEY (JUDGE_ID, JUDGE_QUAL_NAME),
FOREIGN KEY (JUDGE_ID) REFERENCES JUDGE (JUDGE_ID));

CREATE TABLE EMPLOYEE (
EMPLOYEE_ID 		INTEGER 		PRIMARY KEY,
EMPLOYEE_NAME 		VARCHAR(100) 	NOT NULL,
EMPLOYEE_ADDRESS 	VARCHAR(100) 	NOT NULL);

CREATE TABLE SPONSOR (
SPONSOR_ID 						INTEGER			PRIMARY KEY		AUTO_INCREMENT,
SPONSOR_NAME 					VARCHAR(100) 	NOT NULL,
SPONSOR_ADDRESS 				VARCHAR(100) 	NOT NULL,
SPONSOR_OTHER_FUNDING 			DECIMAL(10,2),
SPONSOR_OTHER_SUPPORT 			VARCHAR(100),
SPONSOR_COMMITMENT 				VARCHAR(1000),
SPONSOR_LOGO 					BLOB);

CREATE TABLE ENTRANT (
ENTRANT_ID 			INTEGER 		PRIMARY KEY		AUTO_INCREMENT,
ENTRANT_NAME 		VARCHAR(100) 	NOT NULL,
ENTRANT_ADDRESS 	VARCHAR(100) 	NOT NULL,
ENTRANT_EMAIL 		VARCHAR(100));

CREATE TABLE PRIZE (
PRIZE_ID 		INTEGER 		PRIMARY KEY		AUTO_INCREMENT,
PRIZE_NAME 		VARCHAR(100) 	NOT NULL,
PRIZE_HONOUR 	VARCHAR(100),
PRIZE_COPIES 	INTEGER			NOT NULL,
PRIZE_RULES 	VARCHAR(1000),
PRIZE_VALUE 	DECIMAL(10,2),
SPONSOR_ID		INTEGER,
FOREIGN KEY (SPONSOR_ID) REFERENCES SPONSOR (SPONSOR_ID),
CONSTRAINT PRIZE_COPIES_CK1 CHECK (PRIZE_COPIES >= 1));

CREATE TABLE CONTEST (
CONTEST_ID 				INTEGER 		PRIMARY KEY		AUTO_INCREMENT,
CONTEST_CHAIR 			VARCHAR(100),
CONTEST_TITLE 			VARCHAR(100) 	NOT NULL		UNIQUE,
CONTEST_RULES 			VARCHAR(1000)	NOT NULL,
CONTEST_DROPOFF_DATE 	DATETIME,
CONTEST_DECISION_DATE 	DATETIME,
CONTEST_ENTRY_FEE 		DECIMAL(10,2),
CONTEST_PARENT_ID		INTEGER,
JUDGE_ID				INTEGER,
FOREIGN KEY (CONTEST_PARENT_ID) REFERENCES CONTEST (CONTEST_ID),
FOREIGN KEY (JUDGE_ID) REFERENCES JUDGE (JUDGE_ID));

CREATE TABLE enters (
ENTRANT_ID			INTEGER			NOT NULL,
CONTEST_ID 			INTEGER 		NOT NULL,
ITEM_NAME			VARCHAR(100),
ENTRY_FEE_PAID		BOOLEAN			DEFAULT NULL,
PRIMARY KEY (ENTRANT_ID, CONTEST_ID),
FOREIGN KEY (ENTRANT_ID) REFERENCES ENTRANT (ENTRANT_ID),
FOREIGN KEY (CONTEST_ID) REFERENCES CONTEST (CONTEST_ID));

CREATE TABLE is_eligible_for (
PRIZE_ID		INTEGER		NOT NULL,
CONTEST_ID		INTEGER		NOT NULL,
PRIMARY KEY (PRIZE_ID, CONTEST_ID),
FOREIGN KEY (PRIZE_ID) REFERENCES PRIZE (PRIZE_ID),
FOREIGN KEY (CONTEST_ID) REFERENCES CONTEST (CONTEST_ID));

CREATE TABLE wins (
ENTRANT_ID		INTEGER		NOT NULL	DEFAULT 1,
PRIZE_ID		INTEGER		NOT NULL,
CONTEST_ID		INTEGER		NOT NULL	DEFAULT 1,
PRIMARY KEY (ENTRANT_ID, PRIZE_ID, CONTEST_ID),
FOREIGN KEY (ENTRANT_ID) REFERENCES ENTRANT (ENTRANT_ID),
FOREIGN KEY (PRIZE_ID) REFERENCES PRIZE (PRIZE_ID),
FOREIGN KEY (CONTEST_ID) REFERENCES CONTEST (CONTEST_ID));


/*****************************************************************
*					 PART 2: DATA CREATION                       *
*****************************************************************/


-- TASK 1:

-- MAKE AT LEAST 3 JUDGES:
INSERT INTO JUDGE (JUDGE_NAME, JUDGE_ADDRESS)
	VALUES ('Newo Resak', '555 Somerset Road, Saint John, NB E2K 4X2');
INSERT INTO JUDGE (JUDGE_NAME, JUDGE_ADDRESS)
	VALUES ('Sally Anbu', '140 University Avenue, Saint John, NB E2K 4K2');
INSERT INTO JUDGE (JUDGE_NAME, JUDGE_ADDRESS)
	VALUES ('Fenton Richards', '100 Main Street, Saint John, NB E2K 1H3');
    
-- MAKE JUDGE QUALIFICATIONS
INSERT INTO JUDGE_QUALIFICATION
	VALUES (1, 'Canadian Kennel Club Judge II: Rottweilers');
INSERT INTO JUDGE_QUALIFICATION
	VALUES (1, 'Experienced commercial vegetable grower');
INSERT INTO JUDGE_QUALIFICATION
	VALUES (1, 'Veteran bird watcher');
INSERT INTO JUDGE_QUALIFICATION
	VALUES (2, 'Experienced commercial vegetable grower');
INSERT INTO JUDGE_QUALIFICATION
	VALUES (3, 'Expert dog walker');

-- MAKE AT LEAST 3 ENTRANTS:
INSERT INTO ENTRANT (ENTRANT_NAME, ENTRANT_ADDRESS, ENTRANT_EMAIL)
	VALUES('James Smith', '100 Tucker Park Road, Saint John, NB E2L 4L5', 'james_smith@gmail.com');
INSERT INTO ENTRANT (ENTRANT_NAME, ENTRANT_ADDRESS, ENTRANT_EMAIL)
	VALUES('Sarah Richardson', '750 Weston Road, Saint John, NB E2H 7K9', NULL);
INSERT INTO ENTRANT (ENTRANT_NAME, ENTRANT_ADDRESS, ENTRANT_EMAIL)
	VALUES('Newo Resak', '3651 Prince William Street, Saint John, NB E2L 4V1', NULL);
    
-- MAKE AT LEAST 2 SPONSORS:
INSERT INTO SPONSOR (SPONSOR_NAME, SPONSOR_ADDRESS, SPONSOR_OTHER_FUNDING, SPONSOR_OTHER_SUPPORT, SPONSOR_COMMITMENT, SPONSOR_LOGO)
	VALUES("McDonalds", '111 McAllister Drive, Saint John, NB E2K 2S6', 50, 'French fries', 'Will give a thank you speech', NULL); -- THIS NEEDS TO BE DONE USING A VIEW (1000 TOTAL PRIZE FUNDING)
INSERT INTO SPONSOR (SPONSOR_NAME, SPONSOR_ADDRESS, SPONSOR_OTHER_FUNDING, SPONSOR_OTHER_SUPPORT, SPONSOR_COMMITMENT, SPONSOR_LOGO)
	VALUES("Irving Oil", '10 King Street South, Saint John, NB E2L 0G3', 25, NULL, NULL, NULL); -- THIS NEEDS TO BE DONE USING A VIEW (5000 TOTAL PRIZE FUNDING)
INSERT INTO SPONSOR (SPONSOR_NAME, SPONSOR_ADDRESS, SPONSOR_OTHER_FUNDING, SPONSOR_OTHER_SUPPORT, SPONSOR_COMMITMENT, SPONSOR_LOGO)
	VALUES("The Cheap Company", '499 Dirt Road, Saint John, NB E2J 2K3', 5, NULL, NULL, NULL); -- THIS NEEDS TO BE DONE USING A VIEW (5000 TOTAL PRIZE FUNDING)
   
-- MAKE AT LEAST 3 EMPLOYEES:
INSERT INTO EMPLOYEE
	VALUES(3549, 'Newo Resak', '244 Water Street, Saint John, NB E2L 0C6');
INSERT INTO EMPLOYEE
	VALUES(2999, 'Martha Jones', '100 Tucker Park Road, Saint John, NB E2L 4L5');
INSERT INTO EMPLOYEE
	VALUES(1245, 'Rick Martin', '461 Millidge Avenue, Saint John, NB E2K 2N3');

-- TASK 2:

-- CREATE 2 TOP-LEVEL CONTESTS:
INSERT INTO CONTEST (CONTEST_CHAIR, CONTEST_TITLE, CONTEST_RULES, CONTEST_DROPOFF_DATE, CONTEST_DECISION_DATE, CONTEST_ENTRY_FEE)
	VALUES(NULL,'Craft Contest','1. Exhibitors are responsible to determine in what section and class items should be entered. 
								 2. Untagged items will not be accepted.
								 3. All articles competing in this Department must be the work of the exibitor entering in the name of such.
								 4. Work done in the last year only will be received.
								 5. Any article soiled or defaced is not eligible for competition.',NULL,'2021-08-25 17:00:00',5);
INSERT INTO CONTEST (CONTEST_CHAIR, CONTEST_TITLE, CONTEST_RULES, CONTEST_DROPOFF_DATE, CONTEST_DECISION_DATE, CONTEST_ENTRY_FEE)
	VALUES(NULL,'Farm Products Contest','1. Exhibitors are responsible to determine in what section and class items should be entered. 
										 2. Untagged items will not be accepted.
										 3. All articles competing in this Department must be the work of the exibitor entering in the name of such.
										 4. Any article soiled or defaced is not eligible for competition.
										 5. Excessive polishing or scrubbing of exhibits is to be avoided.',NULL,'2021-08-24 17:00:00',10);
    
DROP PROCEDURE IF EXISTS SUBCATEGORY_GENERATOR;

DELIMITER $$
CREATE PROCEDURE SUBCATEGORY_GENERATOR (IN PARENT_ID INTEGER, IN NUM_OF_SUBCATS INTEGER)
BEGIN
	DECLARE COUNTER INTEGER DEFAULT 0;
    DECLARE PARENT_CONTEST_NAME VARCHAR(100);
    DECLARE PARENT_CONTEST_RULES VARCHAR(1000);
    DECLARE JUDGE_COUNTER INTEGER;
    DECLARE JUDGE_SELECTED INTEGER;
	
    SET PARENT_CONTEST_NAME = (SELECT CONTEST_TITLE FROM CONTEST WHERE CONTEST_ID = PARENT_ID);
    SET PARENT_CONTEST_RULES = (SELECT CONTEST_RULES FROM CONTEST WHERE CONTEST_ID = PARENT_ID);
    
    WHILE COUNTER < NUM_OF_SUBCATS DO
		SET JUDGE_COUNTER = FLOOR(RAND()*9)+1;
        SET JUDGE_SELECTED = (SELECT JUDGE_ID FROM JUDGE WHERE JUDGE_ID IN (FLOOR(RAND()*(SELECT COUNT(JUDGE_ID) FROM JUDGE)+1)) LIMIT 1);
		IF JUDGE_COUNTER > 1 THEN
			INSERT INTO CONTEST (CONTEST_TITLE, CONTEST_RULES, CONTEST_DROPOFF_DATE, CONTEST_DECISION_DATE, CONTEST_PARENT_ID, CONTEST_ENTRY_FEE, JUDGE_ID) 
				VALUES (CONCAT(PARENT_CONTEST_NAME, ' Subcategory #', CAST(COUNTER+1 AS CHAR)), CONCAT(PARENT_CONTEST_RULES, ' List of Specific Subcategory Rules...'),DATE_ADD('2021-08-20 08:00:00', INTERVAL RAND()*5 DAY), DATE_ADD('2021-08-24 17:00:00', INTERVAL RAND()*5 DAY), PARENT_ID, FLOOR(RAND()*50), JUDGE_SELECTED);  -- HOW TO GET THE PARENT_CONTEST_TITLE INCLUDED???
			SET COUNTER = COUNTER + 1;
		ELSEIF JUDGE_COUNTER <= 1 THEN 
			INSERT INTO CONTEST (CONTEST_TITLE, CONTEST_RULES, CONTEST_DROPOFF_DATE, CONTEST_DECISION_DATE, CONTEST_PARENT_ID, CONTEST_ENTRY_FEE) 
				VALUES (CONCAT(PARENT_CONTEST_NAME, ' Subcategory #', CAST(COUNTER+1 AS CHAR)), CONCAT(PARENT_CONTEST_RULES, ' List of Specific Subcategory Rules...'),DATE_ADD('2021-08-20 08:00:00', INTERVAL RAND()*5 DAY), DATE_ADD('2021-08-24 17:00:00', INTERVAL RAND()*5 DAY), PARENT_ID, FLOOR(RAND()*50));  -- HOW TO GET THE PARENT_CONTEST_TITLE INCLUDED???
			SET COUNTER = COUNTER + 1;
		END IF;
	END WHILE;
END $$
DELIMITER ;
    
-- GENERATE 100 SUBCATEGORIES FOR THE 2 TOP-LEVEL CONTESTS
CALL SUBCATEGORY_GENERATOR(1, 100);
CALL SUBCATEGORY_GENERATOR(2, 100);

-- GENERATE 2 THIRD-LEVEL SUBCATEGORIES FOR ONE OF THE SECOND-LEVEL SUBCATEGORIES
CALL SUBCATEGORY_GENERATOR((FLOOR(RAND()*(SELECT COUNT(*) FROM CONTEST))+(SELECT COUNT(CONTEST_ID) FROM CONTEST WHERE CONTEST_PARENT_ID IS NULL)), 2);

-- GENERATE 2 FOURTH-LEVEL SUB-CONTESTS FOR EACH OF THE THIRD-LEVEL SUBCATEGORIES
CALL SUBCATEGORY_GENERATOR(203, 2);
CALL SUBCATEGORY_GENERATOR(204, 2);

-- TASK 3:

-- CREATE AN ENTRY FOR A SPECIFIED ENTRANT IN A SPECIFIED CONTEST
DROP PROCEDURE IF EXISTS CONTEST_ENTRY;

DELIMITER $$
CREATE PROCEDURE CONTEST_ENTRY (IN ENTRANT INTEGER, IN CONTEST INTEGER, IN ITEM VARCHAR(100), IN PAID BOOLEAN)
BEGIN
	IF (SELECT CONTEST_DROPOFF_DATE FROM CONTEST WHERE CONTEST_ID = CONTEST) IS NOT NULL AND (SELECT CONTEST_ENTRY_FEE FROM CONTEST WHERE CONTEST_ID = CONTEST) IS NOT NULL THEN
		INSERT INTO enters (ENTRANT_ID, CONTEST_ID, ITEM_NAME, ENTRY_FEE_PAID) 
			VALUES (ENTRANT, CONTEST, ITEM, PAID);
		INSERT INTO enters (ENTRANT_ID, CONTEST_ID, ITEM_NAME, ENTRY_FEE_PAID)
			VALUES (ENTRANT, (SELECT CONTEST_PARENT_ID FROM CONTEST WHERE CONTEST_ID = CONTEST), ITEM, PAID);
	ELSEIF (SELECT CONTEST_DROPOFF_DATE FROM CONTEST WHERE CONTEST_ID = CONTEST) IS NOT NULL AND (SELECT CONTEST_ENTRY_FEE FROM CONTEST WHERE CONTEST_ID = CONTEST) IS NULL THEN
		INSERT INTO enters (ENTRANT_ID, CONTEST_ID, ITEM_NAME, ENTRY_FEE_PAID) 
			VALUES (ENTRANT, CONTEST, ITEM, NULL);
		INSERT INTO enters (ENTRANT_ID, CONTEST_ID, ITEM_NAME, ENTRY_FEE_PAID)
			VALUES (ENTRANT, (SELECT CONTEST_PARENT_ID FROM CONTEST WHERE CONTEST_ID = CONTEST), ITEM, NULL);
    ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'The contest drop-off date cannot be NULL.';
	END IF;
END$$
DELIMITER ;

CALL CONTEST_ENTRY (1, 25, 'Handmade Chair', 1);
CALL CONTEST_ENTRY (2, 147, 'Custom Rake', 1);
CALL CONTEST_ENTRY (3, 199, 'Bright Red Augur', 1);

-- THE FOLLOWING CONTEST_ENTRY WOULD CAUSE AN ERROR TO BE THROWN AS IS CODED IN THE 'ELSE' CLAUSE OF THE 'CONTEST_ENTRY' PROCEDURE:
-- CALL CONTEST_ENTRY (2, 1, 'Custom Rake', 1); 

-- NEWO RESAK SHOULD BE JUDGING A CONTEST THAT THE OTHER NEWO RESAK HAS ENTERED
UPDATE CONTEST SET JUDGE_ID = (SELECT JUDGE_ID FROM JUDGE WHERE JUDGE_NAME = 'Newo Resak' LIMIT 1) WHERE CONTEST_ID = (SELECT enters.CONTEST_ID FROM ENTRANT JOIN enters USING(ENTRANT_ID) WHERE ENTRANT_NAME = 'Newo Resak' ORDER BY enters.CONTEST_ID DESC LIMIT 1);

-- TASK 4:

-- RANDOMLY GENERATE 100 PRIZES (EACH CAN BE AWARDED 3 TIMES):
DROP PROCEDURE IF EXISTS PRIZE_GENERATOR;

DELIMITER $$
CREATE PROCEDURE PRIZE_GENERATOR (IN NUM_OF_PRIZES INTEGER)
BEGIN
	DECLARE COUNTER INTEGER DEFAULT 0;
    DECLARE CONTEST_COUNTER INTEGER DEFAULT 0;
    DECLARE ELIGIBLE_COUNTER INTEGER DEFAULT 0;
    DECLARE RANDOM_COUNTER INTEGER DEFAULT 2;
    
    WHILE COUNTER < NUM_OF_PRIZES DO
		INSERT INTO PRIZE (PRIZE_NAME, PRIZE_COPIES, PRIZE_VALUE, SPONSOR_ID) 
			VALUES (CONCAT('Prize #', COUNTER+1), 3, (FLOOR(RAND()*(200.00))), (FLOOR(1+RAND()*(SELECT COUNT(SPONSOR_ID) FROM SPONSOR WHERE SPONSOR_ID != 1))));
		IF (SELECT PRIZE_ID FROM PRIZE WHERE PRIZE_ID = 1) THEN
			WHILE CONTEST_COUNTER < (SELECT COUNT(*) FROM CONTEST) DO
				INSERT INTO is_eligible_for (PRIZE_ID, CONTEST_ID)
					VALUES ((SELECT PRIZE_ID FROM PRIZE WHERE PRIZE_ID = (SELECT COUNT(*) FROM PRIZE)), (SELECT CONTEST_ID FROM CONTEST WHERE CONTEST_ID = CONTEST_COUNTER+1));
				SET CONTEST_COUNTER = CONTEST_COUNTER + 1;
			END WHILE;
		END IF;
	SET COUNTER = COUNTER + 1;
	END WHILE;    
END $$
DELIMITER ;

CALL PRIZE_GENERATOR(100);

DROP PROCEDURE IF EXISTS ELIGIBILITY_ASSIGN;

DELIMITER $$
CREATE PROCEDURE ELIGIBILITY_ASSIGN (IN NUM_OF_PRIZES INTEGER)
BEGIN
	DECLARE COUNTER INTEGER DEFAULT 1;
    DECLARE COUNTER1 INTEGER DEFAULT 0;
	
    WHILE COUNTER < NUM_OF_PRIZES DO 
		WHILE COUNTER1 < 5 DO
			CONTEST_LOOP: LOOP
			SET @y = 0;
			SET @x = FLOOR(RAND()*(SELECT COUNT(CONTEST_ID) FROM is_eligible_for WHERE PRIZE_ID = 1)+1);
            
			SELECT is_eligible_for.CONTEST_ID INTO @y FROM is_eligible_for WHERE is_eligible_for.CONTEST_ID = @x AND is_eligible_for.PRIZE_ID = COUNTER + 1;
			IF(@x != @y) THEN
				BEGIN
					INSERT INTO is_eligible_for (PRIZE_ID, CONTEST_ID)
						VALUES (COUNTER + 1, @x);
				LEAVE CONTEST_LOOP;
				END;
            END IF;
            END LOOP;
		SET COUNTER1 = COUNTER1 + 1;
        END WHILE;
        SET COUNTER1 = 0;
	SET COUNTER = COUNTER + 1;
	END WHILE;
END$$
DELIMITER ;

CALL ELIGIBILITY_ASSIGN(100);

INSERT INTO PRIZE (PRIZE_NAME, PRIZE_VALUE, PRIZE_COPIES, SPONSOR_ID)
	VALUES('Prize #101', 9999.99, 5, 1);

-- TASK 5:

-- CREATE A PRIZE_AWARDED TRIGGER:
DROP TRIGGER IF EXISTS PRIZE_AWARDED;

DELIMITER $$
CREATE TRIGGER PRIZE_AWARDED
BEFORE INSERT ON wins
FOR EACH ROW
BEGIN
	DECLARE NUM_PRIZES INTEGER;
    
	SELECT COUNT(PRIZE_ID) INTO NUM_PRIZES FROM wins WHERE PRIZE_ID = new.PRIZE_ID;
	
	IF (NUM_PRIZES  > (SELECT COUNT(PRIZE_ID) FROM PRIZE WHERE PRIZE_ID = new.PRIZE_ID))
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'The maximum number of copies of this prize have already been awarded.';
	END IF;
END$$
DELIMITER ;

-- AWARD SOME PRIZES
INSERT INTO wins (ENTRANT_ID, PRIZE_ID, CONTEST_ID) VALUES (1,1,1);
INSERT INTO wins (ENTRANT_ID, PRIZE_ID, CONTEST_ID) VALUES (2,1,1);

-- THE FOLLOWING TABLE INSERTION WOULD CAUSE AN ERROR TO BE THROWN AS IS CODED IN THE 'IF-THEN' CLAUSE OF THE 'PRIZE_AWARDED' TRIGGER:
-- INSERT INTO wins (ENTRANT_ID, PRIZE_ID, CONTEST_ID) VALUES (3,1,1);

-- CREATE SPONSOR VIEW WITH 2 DERIVED ATTRIBUTES
DROP VIEW IF EXISTS SPONSOR_VIEW;

CREATE VIEW SPONSOR_VIEW AS
SELECT SPONSOR_ID, SPONSOR_NAME, SPONSOR_ADDRESS, (SELECT IFNULL((SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING)),0)) AS SPONSOR_TOTAL_PRIZE_FUNDING, 
	   SPONSOR_OTHER_FUNDING, SPONSOR_OTHER_SUPPORT, SPONSOR_COMMITMENT, SPONSOR_LOGO,
			CASE
				WHEN SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING) IS NULL THEN 'COPPER'
				WHEN SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING) < 100 THEN 'COPPER'
				WHEN SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING) BETWEEN 100 AND 300 THEN 'SILVER'
                WHEN SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING) BETWEEN 300 AND 1000 THEN 'ELECTRUM'
                WHEN SUM(PRIZE_VALUE + SPONSOR_OTHER_FUNDING) BETWEEN 1000 AND 2500 THEN 'GOLD'
                ELSE 'PLATINUM'
			END AS SPONSOR_METAL
FROM SPONSOR LEFT JOIN PRIZE USING(SPONSOR_ID)
GROUP BY SPONSOR_ID;


/*****************************************************************
						PART 3: QUERIES
*****************************************************************/


-- EASY QUERIES:

-- QUERY 1: Determine the number of judges.
SELECT '*************** Query 1 ***************';
SELECT COUNT(*) AS NUMBER_OF_JUDGES 
FROM JUDGE;

-- QUERY 2: Are judges assigned for all contests? List the contests that don't have assigned judges.
SELECT '*************** Query 2 ***************';
SELECT CONTEST_TITLE AS CONTESTS_WITHOUT_JUDGES
FROM JUDGE RIGHT JOIN CONTEST USING(JUDGE_ID)
WHERE CONTEST_ID IS NULL;

-- QUERY 3: What are the titles of the top-level contests (those that are not sub-contests of another contest)?
SELECT '*************** Query 3 ***************';
SELECT CONTEST_TITLE AS TOP_LEVEL_CONTESTS
FROM CONTEST
WHERE CONTEST_PARENT_ID IS NULL;

-- QUERY 4: Show the sponsor view.
SELECT '*************** Query 4 ***************';
SELECT *
FROM SPONSOR_VIEW;

-- QUERY 5: Which judge has the longest (individual) qualification - print the name of the judge and the qualification. In the event of a tie, you can give one or all.
SELECT '*************** Query 5 ***************';
SELECT JUDGE_NAME, JUDGE_QUAL_NAME AS LONGEST_QUALIFICATION
FROM JUDGE RIGHT JOIN (
	SELECT JUDGE_ID, JUDGE_QUAL_NAME, LENGTH(JUDGE_QUAL_NAME) AS QUAL_LENGTH
	FROM JUDGE JOIN JUDGE_QUALIFICATION USING(JUDGE_ID)
	GROUP BY JUDGE_ID, JUDGE_QUAL_NAME
	ORDER BY QUAL_LENGTH DESC) AS QUAL USING(JUDGE_ID)
LIMIT 1;

-- MEDIUM QUERIES:

-- QUERY 6: Is there any judge or entrant who looks like an employee in terms of name or address? 
SELECT '*************** Query 6 ***************';
SELECT NAME
FROM (SELECT JUDGE_ID AS ID, JUDGE_NAME AS NAME, JUDGE_ADDRESS AS ADDRESS FROM JUDGE 
	  UNION
	  SELECT ENTRANT_ID, ENTRANT_NAME, ENTRANT_ADDRESS FROM ENTRANT
	  UNION 
	  SELECT * FROM EMPLOYEE) AS JE
GROUP BY NAME
HAVING COUNT(NAME) > 1;

-- QUERY 8: Which sponsors (by name) have not funded any prize?
SELECT '*************** Query 8 ***************';
SELECT SPONSOR_NAME
FROM PRIZE RIGHT JOIN SPONSOR USING(SPONSOR_ID)
WHERE PRIZE_ID IS NULL;

-- QUERY 10: What judge (give their name) has the most qualifications? In the event of a tie, you can give one or all.
SELECT '*************** Query 10 ***************';
SELECT JUDGE_NAME
FROM JUDGE JOIN JUDGE_QUALIFICATION USING(JUDGE_ID) 
GROUP BY JUDGE_NAME
ORDER BY COUNT(JUDGE_NAME) DESC LIMIT 1;

-- QUERY 11: List all judges by name, together with their qualifications - not individual qualifications, but all qualifications for the judge concatenated with semicolons between them.
SELECT '*************** Query 11 ***************'; 
SELECT JUDGE_NAME, GROUP_CONCAT(JUDGE_QUAL_NAME SEPARATOR ';') AS ALL_QUALIFICATIONS
FROM JUDGE JOIN JUDGE_QUALIFICATION USING(JUDGE_ID)
GROUP BY JUDGE_NAME
ORDER BY LENGTH(GROUP_CONCAT(JUDGE_QUAL_NAME SEPARATOR ';')) DESC;
    
-- HARD QUERIES:

-- QUERY 13: Who has entered something, but won no prize?
SELECT '*************** Query 13 ***************';
SELECT ENTRANT_NAME AS CONTEST_ENTRANT_BUT_NOT_WIN
FROM ENTRANT RIGHT JOIN enters USING(ENTRANT_id) LEFT JOIN wins USING(ENTRANT_ID)
WHERE PRIZE_ID IS NULL
GROUP BY ENTRANT_NAME;

-- QUERY 15: For each 4th-level contest, list its title and all the rules applicable to it. Concatenate the rules for it, its parent, its grandparent, and its great-grandparent (a top-level contest).
SELECT '*************** Query 15 ***************';   
SELECT CONTEST4.CONTEST_TITLE, CONCAT_WS(', ', CONTEST1.CONTEST_RULES, CONTEST2.CONTEST_RULES, CONTEST3.CONTEST_RULES, CONTEST4.CONTEST_RULES) AS ALL_CONTEST_RULES
FROM CONTEST CONTEST1 JOIN CONTEST CONTEST2 ON CONTEST1.CONTEST_ID = CONTEST2.CONTEST_PARENT_ID
					  JOIN CONTEST CONTEST3 ON CONTEST2.CONTEST_ID = CONTEST3.CONTEST_PARENT_ID
					  JOIN CONTEST CONTEST4 ON CONTEST3.CONTEST_ID = CONTEST4.CONTEST_PARENT_ID
GROUP BY CONTEST4.CONTEST_TITLE
LIMIT 1;
  
-- QUERY 18: Which contests (by id and title) are eligible to have prizes and have someone who has entered them, but have had no prizes awarded?
SELECT '*************** Query 18 ***************';
SELECT CONTEST_ID, CONTEST_TITLE
FROM CONTEST LEFT JOIN is_eligible_for USING(CONTEST_ID) JOIN enters USING(CONTEST_ID) LEFT JOIN wins USING(ENTRANT_ID,CONTEST_ID)
WHERE wins.PRIZE_ID IS NULL
GROUP BY CONTEST_ID
ORDER BY CONTEST_ID ASC;
